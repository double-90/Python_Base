## __iter__(self) 、 __next__(self)


## 如果一个类想被用于for ... in循环，类似list或tuple那样，
## 就必须实现一个__iter__()方法，该方法返回一个迭代对象

## Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，
## 直到遇到StopIteration错误时退出循环


class Fib(object):
    def __init__(self):
        self.a, self.b = 0, 1   # 初始化两个计数器a，b
    
    def __iter__(self):
        return self             # 实例本身就是迭代对象，故返回自己

    def __next__(self):
        self.a ,self.b = self.b, self.a + self.b
        if(self.a >= 100000):   # 设置退出循环的条件
            raise StopIteration()
        
        return self.a


f = Fib()
for i in f:
    print(i)






## __getitem__     实现如list那样，通过下标取出元素


class Fib(object):
    def __init__(self):
        self.a, self.b = 1, 1
 
    def __iter__(self):
        return self
    
    def __next__(self):
        self.a, self.b = self.b, self.a + self.b
        if(self.a >= 100000):   # 设置退出循环的条件
            raise StopIteration()
        
        return self.a

    def __getitem__(self, n):   # n 即 下标[n]
        a, b = 1, 1
        L = []
        if isinstance(n, int):   # 如 List[1]
            for i in range(n):
                a, b = b, a + b
            return a
        if isinstance(n, slice):
            start = n.start
            stop = n.stop
            step = n.step
            if start is None:
                start = 0
            if step is None:
                step = 1
            
            for x in range(stop):
                if x >= start:
                    if x == start or x % step == 0:
                        if step > 0:
                            L.append(a)
                        if step < 0:
                            L.insert(0, a)
                a, b = b, a + b
            return L


f = Fib()

print(f[2])
print(f[0:5])
print(f[0:5:2])
print(f[0:5:-1])


            

