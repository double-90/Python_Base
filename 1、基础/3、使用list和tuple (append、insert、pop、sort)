###### list 和 tuple 都可以为空


### list 列表

#list 里面的元素的数据类型可以不同  如 L = ['Apple', 123, True]



L = [1, 2, 3]


L.append(5)         # 追加
print(L)            # [1, 2, 3, 5]


L.insert(0, "a")    # 插入
print(L)            # ['a', 1, 2, 3, 5]


L[4] = 4            # 修改
print(L)            # ['a', 1, 2, 3, 4]


L.pop()             # 删除
print(L)            # ['a', 1, 2, 3]


L.pop(0)            # 删除（指定位置）
print(L)            # [1, 2, 3]







### tuple 元组

tuple1 = ('val1', 'val2', 'val3')


# tuple 一旦初始化就不能修改，即指向元素的内存地址的指针是不能再指向其它地方

# 但是，如果元素是list，list 元素本身不可变，但list内的元素依旧是可变的

# 指向了 list 的内存地址之后，该指针就不能再改变，但 list 中的元素指针仍旧是可以指向别的内存地址的（list：可变对象）




# 实例：

L = ['B', 'C']      # L 指向了 [] 的内存地址

T = ('A', 'B', L)   # T 指向了 () 的内存地址，而 T[2] 指向了 [] 的内存地址

print(T)            # ('A', 'B', ['B', 'C'])


L.append('D')
L.pop(0)

print(T)            # ('A', 'B', ['C', 'D'])



L = ['b', 'c']      # 变量L指向了另一个[]的内存地址
 
print(L)            # ['b', 'c']
print(T)            # ('A', 'B', ['C', 'D'])






# 注意：定义只有一个元素的元组

# 因为 括号()既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义

# 所以 只有1个元素的tuple定义时必须加一个逗号, 如 T = (1,)
