 # -*- coding: utf-8 -*-
 
 1、杨辉三角

          1
         / \
        1   1
       / \ / \
      1   2   1
     / \ / \ / \
    1   3   3   1
   / \ / \ / \ / \
  1   4   6   4   1
 / \ / \ / \ / \ / \
1   5   10  10  5   1


题：每一行看做一个list，试写一个generator，不断输出下一行的list：


def triangles():
    L = []
    n = 1
    while True:
        L = [ 1 if x == 0 or x == n-1 else L[x-1]+L[x] for x in range(n)]
        n = n + 1
        yield L


# 思路: 
# 找规律：
     
    (0) 1行：1列  n行：n列             
    (1) 首尾都为1
    (2) 除了首尾，其他位置的值，都是前一行对应位置与前一位置之和
        如：
        LA = [1, 1]
        LB = [1, 2, 1]          LB[1] = LA[0] + LA[1]   # 2 = 1 + 1
        LC = [1, 3, 3, 1]       LC[1] = LB[0] + LB[1]   # 3 = 1 + 2
        Ln = ????               Ln[x] = Ln-1[x-1] + Ln-1[x] 

# 输出:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]



# 调用情况

n = 0
results = []

for t in triangles():
    results.append(t)
    n = n + 1
    if n == 10:
        break

for t in results:
    print(t)

if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('测试通过!')
else:
    print('测试失败!')